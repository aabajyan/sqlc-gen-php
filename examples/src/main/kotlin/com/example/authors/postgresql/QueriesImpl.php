<?php
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

namespace com\example\authors\postgresql;

const createAuthor = "-- name: createAuthor :one
INSERT INTO authors (
          name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
";

const deleteAuthor = "-- name: deleteAuthor :exec
DELETE FROM authors
WHERE id = $1
";

const getAuthor = "-- name: getAuthor :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
";

const listAuthors = "-- name: listAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
";

class QueriesImpl implements Queries {
    public function __construct(private EntityManagerInterface $entityManager)
    {
    }

    public function createAuthor(string $name, ?string $bio): ?Author
   {
    return conn.prepareStatement(createAuthor).use { stmt ->
      '1' => $name,
          '2' => $bio,

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = Author(
                results.getint(1),
                results.getstring(2),
                results.getstring(3)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

  public function deleteAuthor(int $id): void
{
    conn.prepareStatement(deleteAuthor).use { stmt ->
      '1' => $id,

      stmt.execute()
    }
  }

    public function getAuthor(int $id): ?Author
   {
    return conn.prepareStatement(getAuthor).use { stmt ->
      '1' => $id,

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = Author(
                results.getint(1),
                results.getstring(2),
                results.getstring(3)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

public function listAuthors(): array
{
    return conn.prepareStatement(listAuthors).use { stmt ->
      
      val results = stmt.executeQuery()
      val ret = mutableListOf<Author>()
      while (results.next()) {
          ret.add(Author(
                results.getint(1),
                results.getstring(2),
                results.getstring(3)
            ))
      }
      ret
    }
  }

}

