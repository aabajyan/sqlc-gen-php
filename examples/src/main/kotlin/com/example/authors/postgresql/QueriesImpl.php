<?php
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

namespace com\example\authors\postgresql;

use Doctrine\DBAL\Connection;

const createAuthor = "-- name: createAuthor :one
INSERT INTO authors (
          name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
";

const deleteAuthor = "-- name: deleteAuthor :exec
DELETE FROM authors
WHERE id = $1
";

const getAuthor = "-- name: getAuthor :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
";

const listAuthors = "-- name: listAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
";

class QueriesImpl implements Queries {
    public function __construct(private Connection $connection)
    {
    }

    public function createAuthor(string $name, ?string $bio): ?Authors
   {
       $params = [
        '1' => $name,
          '2' => $bio,
        ];
        $query = $this->connection->executeQuery(createAuthor, $params);
        $results = $query->fetchAllAssociative();
        /**
        *  @var $ret array<Authors>
        */
        $ret = [];
        if(count($results) != 1){
            throw new Exception("NOT 1 ROW RETURNED");
        }
        foreach ($results as $row) {
            $ret[] = new Authors(    $row["id"],
    $row["name"],
    $row["bio"]);
        }

        return $ret[0];
  }

  public function deleteAuthor(int $id): void
{
    $params = [
    '1' => $id,
    ];
    $this->connection->executeQuery(deleteAuthor, $params);
  }

    public function getAuthor(int $id): ?Authors
   {
       $params = [
        '1' => $id,
        ];
        $query = $this->connection->executeQuery(getAuthor, $params);
        $results = $query->fetchAllAssociative();
        /**
        *  @var $ret array<Authors>
        */
        $ret = [];
        if(count($results) != 1){
            throw new Exception("NOT 1 ROW RETURNED");
        }
        foreach ($results as $row) {
            $ret[] = new Authors(    $row["id"],
    $row["name"],
    $row["bio"]);
        }

        return $ret[0];
  }

public function listAuthors(): array
{
    $params = [
    
    ];
    $query = $this->connection->executeQuery(listAuthors, $params);
    $results = $query->fetchAllAssociative();
    /**
    *  @var $ret array<Authors>
    */
      $ret = [];
      foreach ($results as $row) {
          $ret[] = new Authors(    $row["id"],
    $row["name"],
    $row["bio"]);
      }
      return $ret;
  }

}

