<?php
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

namespace App\Sqlc\MySQL;

use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Types\Types;
use Doctrine\DBAL\ArrayParameterType;
use Doctrine\DBAL\Exception;
use Doctrine\DBAL\ParameterType;

const bookByTags = "-- name: bookByTags :many
SELECT
    book_id,
    title,
    name,
    isbn,
    tags
FROM book
         LEFT JOIN author ON book.author_id = author.author_id
WHERE tags = ?
";

class BookByTagsRow {
 public function __construct(
    public int $bookId,
    public string $title,
    public ?string $name,
    public string $isbn,
    public string $tags,
    )
{
}
}

const bookByTagsMultiple = "-- name: bookByTagsMultiple :many
SELECT
    book_id,
    title,
    name,
    isbn,
    tags
FROM book
         LEFT JOIN author ON book.author_id = author.author_id
WHERE tags IN (/*SLICE:tags*/?)
";

class BookByTagsMultipleRow {
 public function __construct(
    public int $bookId,
    public string $title,
    public ?string $name,
    public string $isbn,
    public string $tags,
    )
{
}
}

const bookByTitleYear = "-- name: bookByTitleYear :many
SELECT book_id, author_id, isbn, book_type, title, yr, available, tags FROM book
WHERE title = UUID_TO_BIN(?) AND yr = ?
";

const createAuthor = "-- name: createAuthor :execresult
INSERT INTO author (name) VALUES (?)
";

const createBook = "-- name: createBook :execresult
INSERT INTO book (
    author_id,
    isbn,
    book_type,
    title,
    yr,
    available,
    tags
) VALUES (
             ?,
             ?,
             ?,
             UUID_TO_BIN(?),
             ?,
             ?,
             ?
         )
";

const deleteAuthorBeforeYear = "-- name: deleteAuthorBeforeYear :exec
DELETE FROM book
WHERE yr < ? AND author_id = ?
";

const deleteBook = "-- name: deleteBook :exec
DELETE FROM book
WHERE book_id = ?
";

const getAuthor = "-- name: getAuthor :one
SELECT author_id, name FROM author
WHERE author_id = ?
";

const getBook = "-- name: getBook :one
SELECT book_id, author_id, isbn, book_type, title, yr, available, tags FROM book
WHERE book_id = ?
";

const updateBook = "-- name: updateBook :exec
UPDATE book
SET title = ?, tags = ?
WHERE book_id = ?
";

const updateBookISBN = "-- name: updateBookISBN :exec
UPDATE book
SET title = ?, tags = ?, isbn = ?
WHERE book_id = ?
";

class QueriesImpl implements Queries {
    public function __construct(private Connection $connection)
    {
    }

    /**
    * @throws Exception
    */
    public function bookByTags(string $tags): array
    {
        $params = [
        $tags,
        ];
        $types = [
        ParameterType::STRING,
        ];
        $query = $this->connection->executeQuery(bookByTags, $params, $types);
        $results = $query->fetchAllAssociative();
        /**
        *  @var $ret array<BookByTagsRow>
        */
          $ret = [];
          foreach ($results as $row) {
              $ret[] = new BookByTagsRow(    $row["bookId"],
    $row["title"],
    $row["name"],
    $row["isbn"],
    $row["tags"]);
          }
          return $ret;
    }

    /**
    * @throws Exception
    */
    public function bookByTagsMultiple(array $tags): array
    {
        $params = [
        $tags,
        ];
        $types = [
        ArrayParameterType::STRING,
        ];
        $query = $this->connection->executeQuery(bookByTagsMultiple, $params, $types);
        $results = $query->fetchAllAssociative();
        /**
        *  @var $ret array<BookByTagsMultipleRow>
        */
          $ret = [];
          foreach ($results as $row) {
              $ret[] = new BookByTagsMultipleRow(    $row["bookId"],
    $row["title"],
    $row["name"],
    $row["isbn"],
    $row["tags"]);
          }
          return $ret;
    }

    /**
    * @throws Exception
    */
    public function bookByTitleYear(string $uuidToBin, int $yr): array
    {
        $params = [
        $uuidToBin,
          $yr,
        ];
        $types = [
        ParameterType::STRING,
          ParameterType::INTEGER,
        ];
        $query = $this->connection->executeQuery(bookByTitleYear, $params, $types);
        $results = $query->fetchAllAssociative();
        /**
        *  @var $ret array<Book>
        */
          $ret = [];
          foreach ($results as $row) {
              $ret[] = new Book(    $row["bookId"],
    $row["authorId"],
    $row["isbn"],
    $row["bookType"],
    $row["title"],
    $row["yr"],
    $row["available"] == null ? null : new \DateTimeImmutable($row["available"]),
    $row["tags"]);
          }
          return $ret;
    }

  /**
    * @throws Exception
    */
    public function createAuthor(string $name): int {
        $params = [
            $name,
        ];
        $types = [
        ParameterType::STRING,
        ];
        $this->connection->executeQuery(createAuthor, $params, $types);

        return $this->connection->lastInsertId();
      }

  /**
    * @throws Exception
    */
    public function createBook(
      int $authorId,
      string $isbn,
      string $bookType,
      string $uuidToBin,
      int $yr,
      \DateTimeImmutable $available,
      string $tags): int {
        $params = [
            $authorId,
          $isbn,
          $bookType,
          $uuidToBin,
          $yr,
          $available,
          $tags,
        ];
        $types = [
        ParameterType::INTEGER,
          ParameterType::STRING,
          ParameterType::STRING,
          ParameterType::STRING,
          ParameterType::INTEGER,
          Types::DATE_IMMUTABLE,
          ParameterType::STRING,
        ];
        $this->connection->executeQuery(createBook, $params, $types);

        return $this->connection->lastInsertId();
      }

  /**
    * @throws Exception
    */
    public function deleteAuthorBeforeYear(int $yr, int $authorId): void
    {
        $params = [
        $yr,
          $authorId,
        ];
        $types = [
        ParameterType::INTEGER,
          ParameterType::INTEGER,
        ];
        $this->connection->executeQuery(deleteAuthorBeforeYear, $params, $types);
      }

  /**
    * @throws Exception
    */
    public function deleteBook(int $bookId): void
    {
        $params = [
        $bookId,
        ];
        $types = [
        ParameterType::INTEGER,
        ];
        $this->connection->executeQuery(deleteBook, $params, $types);
      }

    /**
     * @throws Exception
     */
    public function getAuthor(int $authorId): ?Author
   {
        $params = [
        $authorId,
        ];
        $types = [
        ParameterType::INTEGER,
        ];
        $query = $this->connection->executeQuery(getAuthor, $params, $types);
        $results = $query->fetchAllAssociative();
        /**
        *  @var $ret array<Author>
        */
        $ret = [];
        if(count($results) != 1){
            throw new \Exception("NOT 1 ROW RETURNED");
        }
        foreach ($results as $row) {
            $ret[] = new Author(    $row["authorId"],
    $row["name"]);
        }

        return $ret[0];
  }

    /**
     * @throws Exception
     */
    public function getBook(int $bookId): ?Book
   {
        $params = [
        $bookId,
        ];
        $types = [
        ParameterType::INTEGER,
        ];
        $query = $this->connection->executeQuery(getBook, $params, $types);
        $results = $query->fetchAllAssociative();
        /**
        *  @var $ret array<Book>
        */
        $ret = [];
        if(count($results) != 1){
            throw new \Exception("NOT 1 ROW RETURNED");
        }
        foreach ($results as $row) {
            $ret[] = new Book(    $row["bookId"],
    $row["authorId"],
    $row["isbn"],
    $row["bookType"],
    $row["title"],
    $row["yr"],
    $row["available"] == null ? null : new \DateTimeImmutable($row["available"]),
    $row["tags"]);
        }

        return $ret[0];
  }

  /**
    * @throws Exception
    */
    public function updateBook(
      string $title,
      string $tags,
      int $bookId): void
    {
        $params = [
        $title,
          $tags,
          $bookId,
        ];
        $types = [
        ParameterType::STRING,
          ParameterType::STRING,
          ParameterType::INTEGER,
        ];
        $this->connection->executeQuery(updateBook, $params, $types);
      }

  /**
    * @throws Exception
    */
    public function updateBookISBN(
      string $title,
      string $tags,
      string $isbn,
      int $bookId): void
    {
        $params = [
        $title,
          $tags,
          $isbn,
          $bookId,
        ];
        $types = [
        ParameterType::STRING,
          ParameterType::STRING,
          ParameterType::STRING,
          ParameterType::INTEGER,
        ];
        $this->connection->executeQuery(updateBookISBN, $params, $types);
      }

}

