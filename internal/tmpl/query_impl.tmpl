<?php
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

declare(strict_types=1);

namespace {{.Package}};




{{range .Queries}}
const {{.ConstantName}} = "-- name: {{.MethodName}} {{.Cmd}}
{{.SQL}}
";
{{end}}

final readonly class QueriesImpl implements Queries {
    public function __construct(private \PDO $pdo) {}

    {{range .Queries}}
    {{if eq .Cmd ":one"}}
    {{range .Comments}}//{{.}}
    {{end}}
    /**
     * @return {{.Ret.Type}}|null
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.Args}}): ?{{.Ret.Type}}
    {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute([{{ .Arg.Bindings }}]);
        $results = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        /**
         * @var {{.Ret.Type}}[]
         */
        $ret = [];
        if(count($results) != 1){
            throw new \Exception("NOT 1 ROW RETURNED");
        }
        foreach ($results as $row) {
            $ret[] = new {{.Ret.Type}}({{.Ret.ResultSet}});
        }
        return $ret[0];
    }
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end}}
    /**
     * @return {{.Ret.Type}}[]
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.Args}}): array
    {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute([{{ .Arg.Bindings }}]);
        $results = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        /**
         * @var {{.Ret.Type}}[]
         */
        $ret = [];
        foreach ($results as $row) {
            $ret[] = new {{.Ret.Type}}({{.Ret.ResultSet}});
        }
        return $ret;
    }
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end}}
    /**
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.Args}}): void
    {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute([{{ .Arg.Bindings }}]);
    }
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end}}
    /**
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.Args}}): int|string
    {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute([{{ .Arg.Bindings }}]);
        return $this->pdo->lastInsertId();
    }
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end}}
    /**
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.Args}}): int|string {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute([{{ .Arg.Bindings }}]);
        return $this->pdo->lastInsertId();
    }
{{end}}
{{end}}
}

