<?php
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

declare(strict_types=1);

namespace {{.Package}};

use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Types\Types;
use Doctrine\DBAL\ArrayParameterType;
use Doctrine\DBAL\Exception;
use Doctrine\DBAL\ParameterType;


{{range .Queries}}
const {{.ConstantName}} = "-- name: {{.MethodName}} {{.Cmd}}
{{.SQL}}
";
{{end}}

final readonly class QueriesImpl implements Queries {
    public function __construct(private Connection $connection) {}

    {{range .Queries}}
    {{if eq .Cmd ":one"}}
    {{range .Comments}}//{{.}}
    {{end}}
    /**
     * @throws Exception
     */
    public function {{.MethodName}}({{.Arg.Args}}): ?{{.Ret.Type}}
    {
        $params = [
            {{ .Arg.Bindings }}
        ];
        $types = [
            {{ .Arg.DBALTypes }}
        ];
        $query = $this->connection->executeQuery({{.ConstantName}}, $params, $types);
        $results = $query->fetchAllAssociative();
        /**
         *  @var $ret array<{{.Ret.Type}}>
         */
        $ret = [];
        if(count($results) != 1){
            throw new \Exception("NOT 1 ROW RETURNED");
        }
        foreach ($results as $row) {
            $ret[] = new {{.Ret.Type}}({{.Ret.ResultSet}});
        }

        return $ret[0];
  }
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end}}
    /**
     * @throws Exception
     */
    public function {{.MethodName}}({{.Arg.Args}}): array
    {
        $params = [
            {{ .Arg.Bindings }}
        ];
        $types = [
            {{ .Arg.DBALTypes }}
        ];
        $query = $this->connection->executeQuery({{.ConstantName}}, $params, $types);
        $results = $query->fetchAllAssociative();
        /**
        *  @var $ret array<{{.Ret.Type}}>
        */
          $ret = [];
          foreach ($results as $row) {
              $ret[] = new {{.Ret.Type}}({{.Ret.ResultSet}});
          }
          return $ret;
    }
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end}}
    /**
    * @throws Exception
    */
    public function {{.MethodName}}({{.Arg.Args}}): void
    {
        $params = [
            {{ .Arg.Bindings }}
        ];
        $types = [
            {{ .Arg.DBALTypes }}
        ];
        $this->connection->executeQuery({{.ConstantName}}, $params, $types);
      }
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end}}
    /**
    * @throws Exception
    */
    public function {{.MethodName}}({{.Arg.Args}}): int|string
    {
        $params = [
            {{ .Arg.Bindings }}
        ];
        $types = [
            {{ .Arg.DBALTypes }}
        ];
        $this->connection->executeQuery({{.ConstantName}}, $params, $types);

        return $this->connection->lastInsertId();
    }
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end}}
    /**
    * @throws Exception
    */
    public function {{.MethodName}}({{.Arg.Args}}): int|string {
        $params = [
            {{ .Arg.Bindings }}
        ];
        $types = [
            {{ .Arg.DBALTypes }}
        ];
        $this->connection->executeQuery({{.ConstantName}}, $params, $types);

        return $this->connection->lastInsertId();
      }
{{end}}
{{end}}
}

