<?php
// @formatter:off
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

declare(strict_types=1);

namespace {{.Package}};




{{range .Queries}}
const {{.ConstantName}} = "-- name: {{.MethodName}} {{.Cmd}}
{{.SQL}}
";
{{end}}

final readonly class QueriesImpl implements Queries {
    public function __construct(private \PDO $pdo) {}

    {{range .Queries}}
    {{if eq .Cmd ":one"}}
    /**
    {{- range .Comments }}
     * {{.}}
    {{- end }}
     * @return {{.Ret.Type}}|null
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.ArgsWithDefaults}}): ?{{.Ret.Type}}
    {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute({{ .Arg.Bindings }});
        $results = $stmt->fetchAll({{.Ret.PDOFetchMode}});
        $ret = [];
        {
            $count = count($results);
            if ($count === 0) {
                return null;
            }
            
            if ($count !== 1){
                throw new \Exception('Expected exactly 1 row, but got ' . $count);
            }
        }

        $row = $results[0];
        {{- if .Ret.IsClass }}
        $ret[] = new {{.Ret.Type}}({{.Ret.ResultSet}});
        {{- else }}
        $ret[] = ({{.Ret.Type}})({{.Ret.ResultSet}});
        {{- end }}
        return $ret[0];
    }
{{end}}

{{if eq .Cmd ":many"}}
    /**
    {{- range .Comments }}
     * {{.}}
    {{- end }}
     * @return {{.Ret.Type}}[]
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.ArgsWithDefaults}}): array
    {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute({{ .Arg.Bindings }});
        $results = $stmt->fetchAll({{.Ret.PDOFetchMode}});
        $ret = [];
        foreach ($results as $row) {
        {{- if .Ret.IsClass }}
            $ret[] = new {{.Ret.Type}}({{.Ret.ResultSet}});
        {{- else }}
            $ret[] = ({{.Ret.Type}})({{.Ret.ResultSet}});
        {{- end }}
        }
        return $ret;
    }
{{end}}

{{if eq .Cmd ":exec"}}
    /**
    {{- range .Comments }}
     * {{.}}
    {{- end }}
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.ArgsWithDefaults}}): void
    {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute({{ .Arg.Bindings }});
    }
{{end}}

{{if eq .Cmd ":execrows"}}
    /**
    {{- range .Comments }}
     * {{.}}
    {{- end }}
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.ArgsWithDefaults}}): int|string
    {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute({{ .Arg.Bindings }});
        return $this->pdo->lastInsertId();
    }
{{end}}

{{if eq .Cmd ":execresult"}}
    /**
    {{- range .Comments }}
     * {{.}}
    {{- end }}
     * @throws \Exception
     */
    public function {{.MethodName}}({{.Arg.ArgsWithDefaults}}): int|string {
        $stmt = $this->pdo->prepare({{.ConstantName}});
        $stmt->execute({{ .Arg.Bindings }});
        return $this->pdo->lastInsertId();
    }
{{end}}
{{end}}
}

