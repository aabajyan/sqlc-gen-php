<?php
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

namespace {{.Package}};

{{range imports .SourceName}}
{{range .}}use {{.}}
{{end}}
{{end}}
use Doctrine\DBAL\Connection;

{{range .Queries}}
const {{.ConstantName}} = "-- name: {{.MethodName}} {{.Cmd}}
{{.SQL}}
";

{{if .Ret.EmitStruct}}
//TODO
data class {{.Ret.Type}} ( {{- range $i, $e := .Ret.Struct.Fields}}
  {{- if $i }},{{end}}
  val {{.Name}}: {{.Type}}
  {{- end}}
)
{{end}}
{{end}}

class QueriesImpl implements Queries {
    public function __construct(private Connection $connection)
    {
    }
{{range .Queries}}
{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end}}
    public function {{.MethodName}}({{.Arg.Args}}): ?{{.Ret.Type}}
   {
       $params = [
        {{ .Arg.Bindings }}
        ];
        $query = $this->connection->executeQuery({{.ConstantName}}, $params);
        $results = $query->fetchAllAssociative();
        /**
        *  @var $ret array<{{.Ret.Type}}>
        */
        $ret = [];
        if(count($results) != 1){
            throw new Exception("NOT 1 ROW RETURNED");
        }
        foreach ($results as $row) {
            $ret[] = new {{.Ret.Type}}({{.Ret.ResultSet}});
        }

        return $ret[0];
  }
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end}}
public function {{.MethodName}}({{.Arg.Args}}): array
{
    $params = [
    {{ .Arg.Bindings }}
    ];
    $query = $this->connection->executeQuery({{.ConstantName}}, $params);
    $results = $query->fetchAllAssociative();
    /**
    *  @var $ret array<{{.Ret.Type}}>
    */
      $ret = [];
      foreach ($results as $row) {
          $ret[] = new {{.Ret.Type}}({{.Ret.ResultSet}});
      }
      return $ret;
  }
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end}}
  {{ if $.EmitInterface }}override {{ end -}}
public function {{.MethodName}}({{.Arg.Args}}): void
{
    $params = [
    {{ .Arg.Bindings }}
    ];
    $this->connection->executeQuery({{.ConstantName}}, $params);
  }
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end}}
  {{ if $.EmitInterface }}override {{ end -}}
public function {{.MethodName}}({{.Arg.Args}}): int
{
    $params = [
        {{ .Arg.Bindings }}
    ];
    $this->connection->executeQuery({{.ConstantName}}, $params);

    return $this->connection->lastInsertId();
  }
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end}}
  {{ if $.EmitInterface }}override {{ end -}}
public function {{.MethodName}}({{.Arg.Args}}): int {
    $params = [
        {{ .Arg.Bindings }}
    ];
    $this->connection->executeQuery({{.ConstantName}}, $params);

    return $this->connection->lastInsertId();
  }
{{end}}
{{end}}
}

