<?php
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{.SqlcVersion}}

namespace {{.Package}};

{{range imports .SourceName}}
{{range .}}use {{.}}
{{end}}
{{end}}

{{range .Queries}}
const {{.ConstantName}} = "-- name: {{.MethodName}} {{.Cmd}}
{{.SQL}}
";

{{if .Ret.EmitStruct}}
data class {{.Ret.Type}} ( {{- range $i, $e := .Ret.Struct.Fields}}
  {{- if $i }},{{end}}
  val {{.Name}}: {{.Type}}
  {{- end}}
)
{{end}}
{{end}}

class QueriesImpl implements Queries {
    public function __construct(private EntityManagerInterface $entityManager)
    {
    }
{{range .Queries}}
{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end}}
    public function {{.MethodName}}({{.Arg.Args}}): ?{{.Ret.Type}}
   {
    return conn.prepareStatement({{.ConstantName}}).use { stmt ->
      {{.Arg.Bindings}}

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = {{.Ret.ResultSet}}
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end}}
public function {{.MethodName}}({{.Arg.Args}}): array
{
    return conn.prepareStatement({{.ConstantName}}).use { stmt ->
      {{.Arg.Bindings}}

      val results = stmt.executeQuery()
      val ret = mutableListOf<{{.Ret.Type}}>()
      while (results.next()) {
          ret.add({{.Ret.ResultSet}})
      }
      ret
    }
  }
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end}}
  {{ if $.EmitInterface }}override {{ end -}}
public function {{.MethodName}}({{.Arg.Args}}): void
{
    conn.prepareStatement({{.ConstantName}}).use { stmt ->
      {{ .Arg.Bindings }}

      stmt.execute()
    }
  }
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end}}
  {{ if $.EmitInterface }}override {{ end -}}
public function {{.MethodName}}({{.Arg.Args}}): int
{
    return conn.prepareStatement({{.ConstantName}}).use { stmt ->
      {{ .Arg.Bindings }}

      stmt.execute()
      stmt.updateCount
    }
  }
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end}}
  {{ if $.EmitInterface }}override {{ end -}}
public function {{.MethodName}}({{.Arg.Args}}): int {
    $params = [
        {{ .Arg.Bindings }}
    ];
    $this->entityManager->getConnection()->executeQuery({{.ConstantName}}, $params);

    return $this->entityManager->getConnection()->lastInsertId();
}
  }
{{end}}
{{end}}
}

