<?php
// @formatter:off
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

declare(strict_types=1);

namespace Test\DateTimeImmutable;

const addAuthor = "-- name: addAuthor :exec
INSERT INTO
    author (name, created_at)
VALUES
    (?1, ?2)
";

const getAuthorByCreatedAt = "-- name: getAuthorByCreatedAt :one
SELECT
    id, name, created_at
FROM
    author
WHERE
    created_at = ?
";

final readonly class QueriesImpl implements Queries {
    public function __construct(private \PDO $pdo) {}

    /**
     * @throws \Exception
     */
    public function addAuthor(string $name, ?\DateTimeImmutable $createdAt): void
    {
        $stmt = $this->pdo->prepare(addAuthor);
        $stmt->execute([$name, $createdAt?->format('Y-m-d H:i:s')]);
    }

    /**
     * @return Author|null
     * @throws \Exception
     */
    public function getAuthorByCreatedAt(\DateTimeImmutable $createdAt): ?Author
    {
        $stmt = $this->pdo->prepare(getAuthorByCreatedAt);
        $stmt->execute([$createdAt->format('Y-m-d H:i:s')]);
        $results = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        /**
         * @var Author[]
         */
        $ret = [];
        if(count($results) != 1){
            throw new \Exception("NOT 1 ROW RETURNED");
        }
        foreach ($results as $row) {
            $ret[] = new Author($row["id"], $row["name"], $row["created_at"] == null ? null : new \DateTimeImmutable($row["created_at"]));
        }
        return $ret[0];
    }

}

