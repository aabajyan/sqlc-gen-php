<?php
// @formatter:off
// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

declare(strict_types=1);

namespace Test\JSON;

const createAuthor = "-- name: createAuthor :exec
INSERT INTO
    author (data)
VALUES
    (?)
";

const getAuthor = "-- name: getAuthor :one
SELECT
    author_id,
    data
FROM
    author
WHERE
    author_id = ?
";

const listAuthors = "-- name: listAuthors :many
SELECT
    author_id,
    data
FROM
    author
ORDER BY
    json_extract(data, '$.name')
";

final readonly class QueriesImpl implements Queries {
    public function __construct(private \PDO $pdo) {}

    /**
     * @throws \Exception
     */
    public function createAuthor(array $data): void
    {
        $stmt = $this->pdo->prepare(createAuthor);
        $stmt->execute([json_encode($data)]);
    }

    /**
     * @return Author|null
     * @throws \Exception
     */
    public function getAuthor(int $authorId): ?Author
    {
        $stmt = $this->pdo->prepare(getAuthor);
        $stmt->execute([$authorId]);
        $results = $stmt->fetchAll(\PDO::FETCH_NUM);
        $ret = [];
        {
            $count = count($results);
            if ($count === 0) {
                return null;
            }
            
            if ($count !== 1){
                throw new \Exception('Expected exactly 1 row, but got ' . $count);
            }
        }

        $row = $results[0];
        $ret[] = new Author($row[0], json_decode($row[1], true) ?? []);
        return $ret[0];
    }

    /**
     * @return Author[]
     * @throws \Exception
     */
    public function listAuthors(): array
    {
        $stmt = $this->pdo->prepare(listAuthors);
        $stmt->execute();
        $results = $stmt->fetchAll(\PDO::FETCH_NUM);
        $ret = [];
        foreach ($results as $row) {
            $ret[] = new Author($row[0], json_decode($row[1], true) ?? []);
        }
        return $ret;
    }

}

